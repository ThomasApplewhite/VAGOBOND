Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2024-04-30T18:45:31-07:00

====== InitialDevelopmentTasks ======
Created Tuesday 30 April 2024

What's the absolute basics of Vagobond?

[*] Player Character
	[*] Move with WASD
	[*] Aim with Mouse
	[*] Shoot Projectiles
[*] Refactor Player Character into VB classes/into reusable aggregate behavior classes
[*] Health Functionality
[*] Projectile Scene
	[*] Movement Callable
	[*] Collision Callable
[ ] Weapon Scenes
	[*] CollisionLayer initialization (a projectile's collisions are going to be different depending on who is shooting it)
	* It'd be cool if weapons were data-driven assets. Hmm... What if they could be imported via a spreadsheet? I'll worry about that later.
	* Now that I think about this, this is just a more involved FIREBALL... time to steal some assets!
	* Do I even need weapon shooters as a specific type of scene? What makes weapons different? Sprite and some firing properties. Hmm...
	* Figure out a way to set up weapon callables to be player and enemy agnostic
	* alternate idea: make basic weapons for each faciton/unit and generalize them later
	[ ] Remove warnings for bad coupling in weapon and projectile
[ ] Enemy Nodes
[ ] Enemies
	[ ] Infantry Squads
	[ ] Tanks
	[ ] Rival Mechs
[ ] Mirror positions of weapons when Nodes turn around
[ ] Basic Enemy, Weapon, Player, and Background Sprites
[ ] Basic Music and Sounds

What unforseen things have come up?
[*] How should the shooter's velocity be added to a shot projectile's velocity? not all projectiles will be hitscan
	* Well, in real life, the projectile would just go that much faster. conservation of momentum and all that...
	* also, moving things don't have inherent "velocity" attributes, I think? Well, maybe bodies do. So a shooter can get a speed thing to work with
	* Current plan: have weapons give initial velocity to projectiles, and have weapon owners a callable to access owner velocity with
[ ] Why is the player so slow when delta is used for their movement function in playercontrol_bodyslide_callable?
	
What things still need to be thought about or designed?
[*] How do weapons, projectiles, those shooting them, and those getting hit by them interact?
	[*] Collision Layer Definitions
	[x] What do some people do for shooter interactions?
[*] How should projectiles be composited? how much of their functionality should come from composites, and how much should come from inherited scene structure?
[ ] What is the inheritence relationship between playable and non-playable units? Is there any?
	* I want certain mechs to be pilotable by either players or AI, but maybe that's a feature to figure out later. Yeah..
	* After all, I don't even have AI mechs that act like players yet, so who cares? I'll refactor it later.

What should I do later?
[ ] Generalize VBProjectileShooter
	* This may include removing this type and replacing it with some other initialization functionality
[ ] Generalize VBProjectile
	* This may include removing this type and replacing it with some other initialization functionality
[ ] Put weapon properties into data assets.
[ ] Callables that take multiple nodes at once (so 10 weapons can all share the same aiming callable, for example)
[ ] Correct diagonal movement on mech being faster than horizontal movement
[ ] Refactor VBProcessCallable in such a way where the parent node can be passed in as an argumenet so child callables don't need to know their parents
[ ] Configuration warnings for VB Node types, if any
[ ] Figure out why projectile speeds seem so... weird when fired from a moving node.
